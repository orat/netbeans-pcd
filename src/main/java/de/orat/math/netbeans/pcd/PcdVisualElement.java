/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateDataObjectMultiForm.java to edit this template
 *
 * https://netbeans.apache.org/tutorials/nbm-filetype.html
 *
*/
package de.orat.math.netbeans.pcd;

import java.util.ArrayList;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import org.jzy3d.chart.Chart;
import org.jzy3d.chart.factories.SwingChartFactory;
import org.jzy3d.colors.Color;
import org.jzy3d.colors.ColorMapper;
import org.jzy3d.colors.colormaps.ColorMapRainbow;
import org.jzy3d.maths.Coord3d;
import org.jzy3d.maths.Range;
import org.jzy3d.plot3d.primitives.vbo.builders.VBOBuilderListCoord3d;
import org.jzy3d.plot3d.primitives.vbo.drawable.ScatterVBO;
import org.jzy3d.plot3d.rendering.canvas.Quality;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_Pcd_VISUAL",
        iconBase = "de/orat/math/netbeans/pcd/pcd16.png",
        mimeType = "text/x-pcd",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "PcdVisual",
        position = 2000
)
@Messages("LBL_Pcd_VISUAL=Visual")
// implements ExplorerManager.Provider
public final class PcdVisualElement implements MultiViewElement {

    private PcdDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private Chart chart; 
        
    private static ColorMapper coloring(List<Coord3d> coords) {
        Range zrange = Coord3d.getZRange(coords);
        ColorMapper coloring = new ColorMapper(new ColorMapRainbow(), zrange.getMin(), zrange.getMax(),
            new Color(1, 1, 1, .5f));
        return coloring;
    }
    private void addData(List<Point3d> points){
        List<Coord3d> coords= new ArrayList<>();
        for (int i=0;i<points.size();i++){
            Point3d p = points.get(i);
            coords.add(new Coord3d(p.getX(),p.getY(),p.getZ()));
        }
        ScatterVBO drawable = new ScatterVBO(new VBOBuilderListCoord3d(coords, coloring(coords)));
        chart.add(drawable);
    }
   
    public PcdVisualElement(Lookup lkp) {
        obj = lkp.lookup(PcdDataObject.class);
        assert obj != null;
       
        chart = new SwingChartFactory().newChart(Quality.Advanced());
        chart.addMouse();
        PcdDataReader reader = obj.getLookup().lookup(PcdDataReader.class);
        List<Point3d> points = reader.loadPoints();
        if (points != null){
            addData(points);
        } else {
            //TODO
            // warning ausgeben
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /*
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return (JComponent) chart.getCanvas(); 
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
}
